library(shiny)
library(shinyAce)
library(psych)
library(lavaan)
library(semPlot)
library(ggplot2)
library(DT)
library(MVN)
library(shinyBS)

#library(shinyjs)
options(shiny.sanitize.errors = TRUE)
source("chooser.R")

#load("C:/Users/Ronaldo/AtomWorks/static/통계사이트/HMR.RData")
#colnames(Dataset)
#rownames(USArrests)
#shiny::runGitHub("shiny-examples", "rstudio", subdir = "009-upload")
#shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="input")

# model_measure <-
#   'TANGI =~ sq_1_1 + sq_1_2 +  sq_1_3 + sq_1_4
# ASSUR_EMPAT_RESPON =~ sq_2_1 + sq_2_2 + sq_2_3 + sq_2_4 +
# sq_3_1 + sq_3_2 + sq_3_3 +
# sq_4_1 + sq_4_2 + sq_4_3
# RELIA =~ sq_5_1 + sq_5_2 + sq_5_3
# 
# FV =~ fv1 + fv2 + fv3 + fv4 # without 
# EV =~ ev1 + ev2 + ev3 + ev4 # without 
# 
# SAT=~ sat1 + sat2 + sat3'
# 
# fit_structure <- lavaan::sem(model = model_measure, data = Dataset, estimator="MLM", test = "Satorra-Bentler", mimic = "EQS")
# 
# # 분석결과 표시
# summary(fit_structure, standardized=TRUE, fit.measures=TRUE, rsquare=TRUE)

# 그래프 그리기
#semPaths(fit_structure, intercept = FALSE, whatLabel = "est", residuals = FALSE, exoCov = FALSE)


#Dataset_MVN <- subset(Dataset,select=c("sq_1_1", "sq_1_2", "sq_1_3", "sq_1_4", "sq_2_1", "sq_2_2", "sq_2_3", "sq_2_4", "sq_3_1", "sq_3_2", "sq_3_3", "sq_4_1", "sq_4_2", "sq_4_3", "sq_5_1", "sq_5_2", "sq_5_3", "fv1", "fv2", "fv3", "fv4", "ev1", "ev2", "ev3", "ev4", "sat1", "sat2", "sat3"))
#Dataset_MVN <- subset(Dataset,select=c("sq_1_1", "sq_1_2", "sq_1_3"))
# 다변량 정규성 검정
#result1 <- mardiaTest(Dataset_MVN, qqplot = FALSE) # z.kurtosis가 EQS의 표준화 Mardia와 같은 값
#result1

shinyServer(function(input, output, session) {
  
  #putmsg
  putmsg=function(msg="test message"){
    session$sendCustomMessage(type = 'testmessage',message = list( msg)) 
  }
  #확장자 추출.
  file2ext=function(filename){
    namelist=unlist(strsplit(filename,".",fixed=TRUE))
    result=namelist[length(namelist)]
    result=tolower(result)
    if((result=="csv")|(result=="xlsx")|(result=="rds")) return(result)
    else return(NULL)
  }
  
  #경로 
  file2newname=function(file){
    mypath=unlist(strsplit(file$datapath,"/"))
    length(mypath)
    temp=mypath[1]
    for(i in 2:(length(mypath)-1)) temp=paste(temp,mypath[i],sep="/")
    result=paste(temp,"/","test.",file2ext(file$name),sep="")
    result
  }
  
  #csv,rds
  my_readfile=function(file){
    ext=file2ext(file$name)
    result=NULL
    if(is.null(ext)) {
      session$sendCustomMessage(type = 'testmessage',
                                message = list( 'Only file with xlsx or csv or RDS format is supported.'))
    } else if(ext=="csv") {
      try(result<-read.csv(file$datapath,header=TRUE,stringsAsFactors = FALSE),silent=TRUE)
      if(is.null(result)) {
        try(result<-read.csv(file$datapath,header=TRUE,fileEncoding="euc-kr",stringsAsFactors = FALSE),silent=TRUE)
        if(is.null(result)) session$sendCustomMessage(type = 'testmessage',
                                                      message = list( 'File read error : please check file encoding')) 
      }
    }  else if(ext=="rds"){
      result=readRDS(file$datapath)
      result=data.frame(result)
    } else{
      newname=file2newname(file)
      file.copy(file$datapath,newname)
      result=read_excel(newname)
      if(is.null(result)) session$sendCustomMessage(type = 'testmessage',
                                                    message = list( 'File read error : please check file encoding')) 
    } 
    result
  }
  
  #
  userFile <-reactive({
    if(is.null(input$file)) {
      return(NULL)
      #putmsg("먼저 file을 업로드하세요 !")   
    }
    else df<-my_readfile(input$file)
    df
  })
  
  userFile2 <- reactive({
    inFile <- input$file
    if (is.null(inFile)) 
      return(NULL)
    df <- read.csv(input$file$datapath,
                   header = input$header,
                   sep = ",")
    
  })
  
  output$table <- DT::renderDataTable ({
    DT::datatable(userFile(), options = list(scrollX = TRUE, scrollY = "500px"))
  })
  
  #button
  observeEvent(input$saveData, {
    putmsg("저장이 완료되었습니다.")
    #updateTabItems(session, "sidebar", "home")
  })
  
  observeEvent(input$return, {
    updateTabItems(session, "sidebar", "home")
  })
  observeEvent(input$return2, {
    updateTabItems(session, "sidebar", "home")
  })
  observeEvent(input$return3, {
    updateTabItems(session, "sidebar", "home")
  })
  observeEvent(input$return4, {
    updateTabItems(session, "sidebar", "home")
  })
  observeEvent(input$return5, {
    updateTabItems(session, "sidebar", "home")
  })
  observeEvent(input$return6, {
    updateTabItems(session, "sidebar", "home")
  })
  observeEvent(input$return7, {
    updateTabItems(session, "sidebar", "home")
  })
  
  observeEvent(input$goMenu, {
    updateTabItems(session, "sidebar", "home")
  })
  
  output$selectColumn <- renderUI({
    selectInput("variables", "변수 목록", choices = colnames(userFile()), multiple = TRUE, selectize=FALSE)
  })
  
  output$listbox <- renderPrint({
    input$variables
  })
  
  output$selectedColumn <- renderUI({
    selectInput("variables2", "선택 변수", choices = colnames(userFile()), multiple = TRUE, selectize=FALSE)
  })
  
  output$listbox2 <- renderPrint({
    input$variables2
  })
  
  
  model_measure <- reactive({
    model <- input$equation
    model
  })
  # model_measure <- ({
  #   'TANGI =~ sq_1_1 + sq_1_2 +  sq_1_3 + sq_1_4
  #   ASSUR_EMPAT_RESPON =~ sq_2_1 + sq_2_2 + sq_2_3 + sq_2_4 + 
  #   sq_3_1 + sq_3_2 + sq_3_3 +
  #   sq_4_1 + sq_4_2 + sq_4_3
  #   RELIA =~ sq_5_1 + sq_5_2 + sq_5_3
  #   
  #   FV =~ fv1 + fv2 + fv3 + fv4 # without 
  #   EV =~ ev1 + ev2 + ev3 + ev4 # without 
  #   
  #   SAT=~ sat1 + sat2 + sat3'
  # })
  
  #sem 분석
  fit_structure <- reactive({
    inFile <- input$file
    if (is.null(inFile)) 
      return(NULL)
    model_measure <- model_measure()
    lavaan::sem(model = model_measure, data = userFile(), estimator="MLM", test = "Satorra-Bentler", mimic = "EQS")
  }) 
  
  # 모형 적합도
  fit_measure1 <- reactive({
    fitMeasures(fit_structure(), 
                c("chisq","df","pvalue","cfi","nfi","nnfi","rmsea","aic","bic"))
  })
  
  fit_measure2 <- reactive({
    fitMeasures(fit_structure(), 
                c("chisq.scaled","df.scaled","pvalue.scaled",
                  "cfi.scaled","nfi.scaled","nnfi.scaled","rmsea.scaled",
                  "aic.scaled","bic.scaled"))
  })
  
  # 계수 도출
  para <- reactive({
    parameterEstimates(fit_structure())
  })
  para_stand <- reactive({
    standardizedSolution(fit_structure())
  }) 
  para1 <- reactive({
    para()[para()$op == "~",]
  })
  para2 <- reactive({
    para()[para()$op == "=~",]
  })
  para_stand1 <- reactive({
    para_stand()[para_stand()$op == "~",]
  })
  para_stand2 <- reactive({
    para_stand()[para_stand()$op == "=~",]
  })
  
  #R-square
  r_square <- reactive({
    lavInspect(fit_structure(), "r-square")
  })
  
  # 수정 지수
  mi <- reactive({
    modindices(fit_structure(),standardized=TRUE, 
               alpha=0.05, sort.=TRUE)
  })
  modi1 <- reactive({
    head(mi()[mi()$op == "~~",],10)
  })
  modi2 <- reactive({
    head(mi()[mi()$op == "=~",],10)
  })
  modi3 <- reactive({
    head(mi()[mi()$op == "~",],10)
  })
  
  # AVE 계산
  ave1 <- reactive({
    a <- inspect(fit_structure(), "std")$lambda
    a[a==0] <- NA
    apply(a^2, 2, mean, na.rm=TRUE)
  })
  
  # 잠재변수간 상관관계
  latent_cor <- reactive({
    lavInspect(fit_structure(), "cor.lv")
  })
  # 잠재변수간 표준오차
  latent_std <- reactive({
    lavInspect(fit_structure(), "std.err")$psi
  })
  
  # 측정모형 구축(new): 잠재변수는 모두 대문자
  # 서비스 품질(5요인) - 기능적 가치, 감정적 가치 - 만족도
  
  # output$table <- DT::renderDataTable({
  #   DT::datatable(Dataset, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
  # })
  
  output$Plot <- renderPlot({
    print(semPaths(fit_structure(), intercept = FALSE, whatLabel = "est", residuals = FALSE, exoCov = FALSE))
  })
  
  output$measure1 <- renderPrint({
    fit_measure1()
  })
  
  output$measure2 <- renderPrint({
    fit_measure2()
  })
  
  output$parameter1 <- renderPrint({
    para1()
  })
  
  output$parameter2 <- renderPrint({
    para2()
  })
  
  output$para_stand1 <- renderPrint({
    para_stand1()
  })
  
  output$para_stand2 <- renderPrint({
    para_stand2()
  })
  
  output$r_square <- renderPrint({
    r_square()
  })
  
  output$modi1 <- renderPrint({
    modi1()
  })
  
  output$modi2 <- renderPrint({
    modi2()
  })
  
  output$modi3 <- renderPrint({
    modi3()
  })

  output$ave <- renderPrint({
    ave1()
  })
  
  output$latent_cor <- renderPrint({
    latent_cor()
  })
  
  output$latent_std <- renderPrint({
    latent_std()
  })

  output$summary2 <- renderPrint({
    summary(fit_structure(), standardized=TRUE, fit.measures=TRUE, rsquare=TRUE)
  })
  
  output$Plot2 <- renderPlot({
    print(semPaths(fit_structure(), intercept = FALSE, whatLabel = "est", residuals = FALSE, exoCov = FALSE))
  })
  
  
  output$Chooser=renderUI({
    mydf = userFile()
    size = min(ncol(mydf), 20)
    
    chooserInput("mychooser", "All Columns", "Selected Columns",
                 colnames(mydf), c(), size = size, multiple = TRUE)
    
    
  })
  
  # observeEvent(input$collist, {
  #   toggle('text_div')
  #   output$list <- renderPrint({
  #     print(collist())
  #   })
  # })
  
  vresult <- reactive({
    list <- input$mychooser$right
    mydf = userFile()
    if(length(list)<2)
      return("변수를 2개 이상 선택하세요.")
    Dataset_MVN <- subset(mydf,select=list)
    result1 <- mardiaTest(Dataset_MVN, qqplot = FALSE)
    result1
  })
  collist2 <- reactive({
    list <- input$mychooser$right
    mydf = userFile()
    if(length(list)==0)
      return(NULL)
    Dataset_MVN <- subset(mydf,select=list)
    Dataset_MVN
  })
  output$list <- renderPrint({
    #print(input$mychooser$right)
    print(vresult())
    #result1 <- mardiaTest(collist2(), qqplot = FALSE) # z.kurtosis가 EQS의 표준화 Mardia와 같은 값
    #print(result1)
  })
  output$list2 <- renderPrint({
    print(input$mychooser$right)
    print(vresult())
    #mardiaTest(collist2(), qqplot = FALSE)
    #result1 <- mardiaTest(collist2(), qqplot = FALSE) # z.kurtosis가 EQS의 표준화 Mardia와 같은 값
    #print(result1)
  })
  output$table2 <- renderTable({
    collist2()
  })
  
  plustext=function(x){
    if(is.null(x)) result=""
    if(length(x)>0) result=x[1]
    if(length(x)>1) for(i in 2:length(x)) result=paste(result,x[i],sep="+")
    result
  }
  
  #방정식
  EqText=reactive({
    temp=""
    if(input$lefttext!="") temp=input$lefttext
    else temp=plustext(input$leftvar)
    if((temp=="") & (length(input$rightvar)==0)) result<-""
    else{
      result=paste(temp,input$operator, plustext(input$rightvar))
    }
    result
  })
  
  observe({
    
    df=userFile()
    
    vars=c("Select..."="",colnames(df))
    
    updateSelectInput(session,"leftvar",choices=c(vars,"indirect effect","total effect"))
    updateSelectInput(session,"rightvar",choices=c(vars,"1"))
  })
  
  #add_btn
  observeEvent(input$add, {
    if(input$equation=="") updateTextInput(session,"equation",value=EqText()) 
    else updateTextInput(session,"equation",value=paste(input$equation,EqText(),sep="\n"))
  })
  
  extractLatentVar=function(){
    newvar=c()
    if(input$equation!=""){
      equations=unlist(strsplit(input$equation,"\n",fixed=TRUE))
      for(i in 1:length(equations)){
        if(grepl("=~",equations[i])==TRUE) {
          temp=unlist(strsplit(equations[i],"=~",fixed=TRUE))[1]
          newvar=c(newvar,temp)
          
        }   
      }
    }
    newvar
  }
  
  observeEvent(input$equation,{
    
    newvar=c() 
    if(input$equation!="") newvar=extractLatentVar() 
    
    #cat("\nnewvar=",newvar)
    newchoices=c("Select..."="",colnames(userFile()),newvar)
    #cat("\nnewchoices=",newchoices)
    updateSelectInput(session,"leftvar",choices=newchoices,selected="")
    updateSelectInput(session,"rightvar",choices=newchoices,selected="")
    # updateSelectInput(session,"indepvar",choices=newchoices)
    # updateSelectInput(session,"resvar",choices=newchoices)
    # updateSelectInput(session,"mediator",choices=newchoices)
    # updateSelectInput(session,"group",choices=newchoices)
    updateTextInput(session,"lefttext",value="")
    
  })
  
  observeEvent(input$reset, {
    updateTextInput(session,"equation",value="")
    updateSelectInput(session,"leftvar",selected="")
    updateSelectInput(session,"rightvar",selected="")
  })
  
  output$EquationText=renderPrint({
    
    if(EqText()=="") {
      cat("변수와 연산자를 선택하여 구조방정식을 만드세요!")
    }  
    else cat(EqText())
  })
  
  
})


